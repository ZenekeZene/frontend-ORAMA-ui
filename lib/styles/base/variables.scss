@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

@mixin defineColorHSL($color, $hue, $saturation, $lightness){
  #{$color}: unquote("hsl(#{$hue}, #{$saturation}, #{$lightness})");
  #{$color}-h: #{$hue};
  #{$color}-s: #{$saturation};
  #{$color}-l: #{$lightness};
}

@function lightness($color, $lightnessMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, $color-s, calc(#{$color-l} * #{$lightnessMultiplier}));
}

@function saturation($color, $saturationMultiplier){
  $color: str-replace($color, 'var(');
  $color: str-replace($color, ')');
  $color-h: var(#{$color+'-h'});
  $color-s: var(#{$color+'-s'});
  $color-l: var(#{$color+'-l'});
  @return hsl($color-h, calc(#{$color-s} * #{$saturationMultiplier}), $color-l);
}

:root {
  --vh: 1;
  @include defineColorHSL(--color-primary, 238, 29%, 50%);
  @include defineColorHSL(--color-secondary, 9, 100%, 79%);
  @include defineColorHSL(--color-tertiary, 46, 95%, 67%);
  @include defineColorHSL(--color-default, 0, 0%, 93%);
  --color-incorrect: #e3665c;
  --color-correct: #65a681;
  --color-dark: #303031;
  --color-background: white;
  --duration: 150ms;
  --button-border-radius: 1rem;
  --container-max-width: 66rem;
}

$gutter: 1rem;

@import "breakpoints";
